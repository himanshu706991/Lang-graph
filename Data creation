# Project: Multi-Agent Query Routing System with LangGraph
# File: project_structure_and_dummy_data.py

"""
Step 1: Define the folder structure and generate dummy data
"""
import os
import sqlite3
from faker import Faker
import pandas as pd
from fpdf import FPDF
from PIL import Image, ImageDraw, ImageFont

fake = Faker()

# Step 1.1: Create folder structure
folders = [
    "data/sql", 
    "data/pdf", 
    "data/images", 
    "vectorstores/pdf", 
    "vectorstores/images",
    "agents", 
    "langgraph_pipeline", 
    "output"
]

for folder in folders:
    os.makedirs(folder, exist_ok=True)

# Step 1.2: Generate dummy SQL data
def create_sqlite_db():
    conn = sqlite3.connect("data/sql/business.db")
    cursor = conn.cursor()

    tables = ["property", "casualty", "banking", "automobile", "technical"]
    for table in tables:
        cursor.execute(f"""
        CREATE TABLE IF NOT EXISTS {table} (
            claim_id INTEGER PRIMARY KEY,
            customer_name TEXT,
            claim_amount REAL,
            claim_date TEXT,
            description TEXT
        )
        """)
        for _ in range(100):
            cursor.execute(f"INSERT INTO {table} (customer_name, claim_amount, claim_date, description) VALUES (?, ?, ?, ?)",
                           (fake.name(), round(fake.pyfloat(min_value=1000, max_value=100000), 2), fake.date(), fake.sentence()))
    conn.commit()
    conn.close()

# Step 1.3: Generate dummy PDFs
def generate_pdf(file_path, title):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    pdf.cell(200, 10, txt=title, ln=True, align='C')
    for _ in range(20):
        pdf.multi_cell(0, 10, fake.paragraph(nb_sentences=5))
    pdf.output(file_path)

# Step 1.4: Generate dummy image diagrams
def generate_flowchart_image(file_path, label):
    img = Image.new('RGB', (600, 300), color = (255, 255, 255))
    d = ImageDraw.Draw(img)
    font = ImageFont.load_default()
    d.rectangle([50, 50, 550, 250], outline=(0, 0, 0), width=2)
    d.text((60, 60), f"Flowchart: {label}\n\nStep 1: Input\nStep 2: Processing\nStep 3: Output", fill=(0, 0, 0), font=font)
    img.save(file_path)

# Run all generators
create_sqlite_db()
for domain in ["Property", "Casualty", "Banking", "Automobile", "Technical"]:
    generate_pdf(f"data/pdf/{domain}.pdf", f"{domain} Report")
    generate_flowchart_image(f"data/images/{domain}_flow.png", domain)

print("âœ… Dummy data generation complete. SQL, PDFs, and images ready.")


$$$$$44
 the file Multi Agent Langgraph. This includes:

âœ… SQLite DB with 5 domain tables: Property, Casualty, Banking, Automobile, Technical

âœ… 5 PDF reports with dummy paragraphs using Faker

âœ… 5 flowchart-style images simulating data diagrams

âœ… Clean folder structure and saved outputs

Next Step: Iâ€™ll now implement:

ðŸ§  Vector DB generation for PDFs (using FAISS)

ðŸ§  OCR + vector DB for images

ðŸ¤– LangGraph pipeline with:

Routing agent

SQL agent

PDF RAG agent

OCR image RAG agent

Human critic agent

Final summarizer
